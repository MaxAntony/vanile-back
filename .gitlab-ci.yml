# Definición de etapas del pipeline
stages:
  - install
  - validate
  - lint
  - test
  - build
  - security
  - deploy

# Variables globales
variables:
  NODE_ENV: 'production'
  CACHE_FOLDER: '.npm'
  DIST_FOLDER: 'dist'
  NODE_VERSION: '18'

# Configuración default para todos los jobs
default:
  image: node:${NODE_VERSION}-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_FOLDER}/
      - node_modules/
    policy: pull-push
  before_script:
    - node --version
    - npm --version
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Instalación de dependencias
install_dependencies:
  stage: install
  script:
    - echo "Installing dependencies..."
    - apk add --no-cache python3 make g++ # Necesario para algunos paquetes nativos
    - npm ci --cache ${CACHE_FOLDER} --prefer-offline
    - npm audit || true
  artifacts:
    paths:
      - node_modules/
      - ${CACHE_FOLDER}/
      - package.json
      - package-lock.json
      - .eslintrc*
      - tsconfig.json
    expire_in: 1 day
  rules:
    - when: always

# Validación de configuración
validate_config:
  stage: validate
  script:
    - echo "Validating configuration files..."
    - test -f package.json || (echo "package.json not found" && exit 1)
    - test -f tsconfig.json || (echo "tsconfig.json not found" && exit 1)
    - test -f .eslintrc.js || (echo ".eslintrc.js not found" && exit 1)
    - jq empty package.json || (echo "Invalid package.json" && exit 1)
    - npm run typecheck || (echo "TypeScript configuration error" && exit 1)
  dependencies:
    - install_dependencies

# Análisis de código
lint:
  stage: lint
  before_script:
    - npm i -g eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
    - eslint --version
  script:
    - echo "Running linter..."
    - eslint --ext .ts "{src,apps,libs,test}/**/*.ts" --max-warnings 0
  after_script:
    - echo "Linting process completed"
  dependencies:
    - install_dependencies
  artifacts:
    when: on_failure
    paths:
      - eslint-report.json
    expire_in: 1 week

# Tests unitarios
unit_tests:
  stage: test
  before_script:
    - npm i -g jest
  script:
    - echo "Running unit tests..."
    - jest --ci --coverage --forceExit
    - jest --ci --coverage --coverageReporters=text-summary
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit:
        report_paths: 
          - junit.xml
    paths:
      - coverage/
    expire_in: 1 week
  dependencies:
    - install_dependencies

# Tests e2e
e2e_tests:
  stage: test
  services:
    - name: postgres:14-alpine
      alias: db
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_URL: postgres://postgres:postgres@db:5432/testdb
  before_script:
    - apk add --no-cache postgresql-client
    - until pg_isready -h db -p 5432; do echo "Waiting for database..."; sleep 2; done
  script:
    - echo "Running e2e tests..."
    - npm run test:e2e -- --forceExit
  dependencies:
    - install_dependencies
  allow_failure: true

# Build de la aplicación
build:
  stage: build
  script:
    - echo "Building application..."
    - npm run build
    - if [ ! -d "${DIST_FOLDER}" ]; then echo "Build failed - dist folder not created" && exit 1; fi
    - echo "Build completed successfully"
  artifacts:
    paths:
      - ${DIST_FOLDER}/
    expire_in: 1 week
  dependencies:
    - install_dependencies

# Escaneo de seguridad
security_scan:
  stage: security
  before_script:
    - apk add --no-cache git python3 py3-pip
    - pip3 install safety
  script:
    - echo "Running security scan..."
    - npm audit
    - safety check
    - if [ -f "package-lock.json" ]; then
        npx audit-ci --moderate;
      fi
  allow_failure: true
  dependencies:
    - install_dependencies
  artifacts:
    reports:
      security: gl-security-report.json
    when: always

# Deploy a staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "Deploying to staging..."
    - npm run deploy:staging
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - develop
  dependencies:
    - build
  when: manual

# Deploy a producción
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "Deploying to production..."
    - npm run deploy:prod
  environment:
    name: production
    url: https://prod.example.com
  only:
    - main
  when: manual
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never