image: node:22

stages:
  - lint
  # - test
  - build
  - security
  - deploy

default:
  interruptible: true # Cancela jobs redundantes en caso de nuevos commits
  retry: 2 # Reintenta los jobs fallidos hasta 2 veces
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push # Intenta usar el cache más reciente y luego actualiza

variables:
  NODE_ENV: development
  CI_SECURITY_AUDIT: 'true' # Para habilitar auditorías de seguridad condicionales

before_script:
  # https://pnpm.io/es/continuous-integration#gitlab-ci
  - npm i -g corepack@latest
  - corepack enable
  - corepack prepare pnpm@latest-10 --activate
  - pnpm config set store-dir .pnpm-store
  - pnpm i --frozen-lockfile

lint:
  stage: lint
  script:
    - pnpm run lint
  allow_failure: false # El linter no debe fallar

# .test:
#   stage: test
#   script:
#     - pnpm run test
#     - pnpm run test:e2e
#   artifacts:
#     reports:
#       junit: test-results.xml
#     paths:
#       - coverage/
#     expire_in: 1 week
#   coverage: '/^Statements\s*:\s*([\d.]+)%/' # Extrae métricas de cobertura si usas Jest

build:
  stage: build
  image: quay.io/buildah/stable
  variables:
    # Use vfs with buildah. Docker offers overlayfs as a default, but Buildah
    # cannot stack overlayfs on top of another overlayfs filesystem.
    STORAGE_DRIVER: vfs
    # Write all image metadata in the docker format, not the standard OCI format.
    # Newer versions of docker can handle the OCI format, but older versions, like
    # the one shipped with Fedora 30, cannot handle the format.
    BUILDAH_FORMAT: docker
    FQ_IMAGE_NAME: '$CI_REGISTRY_IMAGE'
  before_script:
    # GitLab container registry credentials taken from the
    # [predefined CI/CD variables](../variables/index.md#predefined-cicd-variables)
    # to authenticate to the registry.
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah images
    - buildah build -t $FQ_IMAGE_NAME
    - buildah images
    - buildah push $FQ_IMAGE_NAME
  # script:
  #   - pnpm run build
  # artifacts:
  #   paths:
  #     - dist/
  #   expire_in: 1 week

security_audit:
  stage: security
  script:
    - pnpm audit --production
    - pnpm audit --json > audit-report.json
  artifacts:
    reports:
      dependency_scanning: audit-report.json
    paths:
      - audit-report.json
    expire_in: 1 week
  only:
    - main

deploy:
  stage: deploy
  variables:
    NODE_ENV: production
  script:
    - echo "Deploying application..."
    - ls dist # Reemplazar con lógica real de despliegue
  only:
    - tags
  environment:
    name: production
    url: https://example.com # Reemplaza con tu URL
