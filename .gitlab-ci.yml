# Definición de las etapas del pipeline
stages:
  - install
  - test
  - build
  - deploy

# Variables globales
variables:
  NODE_VERSION: "18-alpine"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache para node_modules
cache:
  paths:
    - node_modules/

# Job para instalar dependencias
install:
  stage: install
  image: node:${NODE_VERSION}
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/

# Job para ejecutar tests
test:
  stage: test
  image: node:${NODE_VERSION}
  script:
    - npm run test
    - npm run test:e2e
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  dependencies:
    - install

# Job para análisis de código
lint:
  stage: test
  image: node:${NODE_VERSION}
  script:
    - npm ci
    - npm run lint
  dependencies:
    - install

# Job para construir la imagen Docker
build:
  stage: build
  image: docker:20
  services:
    - docker:20-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi
  only:
    - main
    - develop

# Job para despliegue en desarrollo
deploy_dev:
  stage: deploy
  image: docker:20
  services:
    - docker:20-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Aquí irían los comandos de despliegue específicos para tu entorno
    - echo "Desplegando en ambiente de desarrollo..."
  environment:
    name: development
  only:
    - develop

# Job para despliegue en producción
deploy_prod:
  stage: deploy
  image: docker:20
  services:
    - docker:20-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Aquí irían los comandos de despliegue específicos para tu entorno
    - echo "Desplegando en ambiente de producción..."
  environment:
    name: production
  only:
    - main
  when: manual